函数(Function)
  函数的声明:
    function 函数名(参数1:类型,参数2:类型.....){}
  函数表达式:
    let / var 函数表达式名=function 函数名(参数1:类型,参数2:类型.....){}
  在表达式中函数名可以省略,此时函数就是匿名函数
  箭头函数表达式:
    let / var 箭头表达式名 = (参数1:类型,参数2:类型.....) => {}
  在箭头函数表达式中，只有一个参数且没有参数类型时小括号可以省略
  如果函数体中只有一条语句，那么大括号可以省略，否则不能
  Function 对象
    let / var 对象名= new Function(参数1,参数2.....,参数n,函数体)
    注:函数表达式和箭头函数表达式不会像函数声明一样被提升、
      箭头函数this指向定义是所处的对象，而不是执行时的对象
函数的调用方式:
  函数模式
  方法模式(对象.方法名(参数))
  构造器模式
  上下文模式 函数名.apply(对象,[参数1,参数2,....,参数n])/函数名.call(对象,参数1,参数2,.....参数n)
  注:apply和call第一个参数也可以是null
   也可以是bind调用函数:
    bind方法会创建一个新函数,成为绑定函数,当调用这个绑定函数时,bind方法的第一个参数用来指定this。
函数返回值:
  字符串/数组/函数/枚举/元组 
参数的函数化功能
  函数中可以有参数,但函数中的参数也可能是函数,这种就是函数的参数化功能。
函数的参数：可选参数、Rest参数、默认参数
  Rest参数而言:
    形式如下:
      function 函数名(a:类型,b:类型,....restArgs:类型[])
    Rest参数只包括那些没有给出名称的参数,arguments包含所有参数
    arguments 对象本质上不是数组,而Rest参数是数组
    arguments 无需声明,是内置对象,而Rest参数是需要声明的
    Rest参数必须放在末尾
  默认参数形式如下:
    function 函数名(a:类型,....,b:类型=默认值){}
类型注解(:)
  TypeScript中不一定要使用类型注释.但是,类型注解有助于编译器检查类型,并有助于避免处理数据类型是报错.
    类型注解是一种编写代码的好习惯,一方面开启静态类型检测功能,另一方面让后续的维护更加容易
特殊函数:
  匿名函数
    使用场景:
      即可自调用
      回调函数
      对象的方法
  构造函数
  递归函数
  lambda函数
  函数重载
    参数类型不同
    参数数量不同
    参数类型顺序不同
    参数默认值不同
